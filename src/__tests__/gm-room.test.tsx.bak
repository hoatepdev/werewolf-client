import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
import GmRoomPage from '../app/gm-room/[roomCode]/page'
import { getSocket } from '../lib/socket'
import { useRoomStore } from '../hook/useRoomStore'
import { Player } from '../types/player'

vi.mock('../lib/socket')
vi.mock('next/navigation', () => ({
  useRouter: () => ({
    push: vi.fn(),
  }),
}))

const mockSocket = {
  emit: vi.fn(),
  on: vi.fn(),
  off: vi.fn(),
}

const mockPlayers: Player[] = [
  {
    id: 'player-1',
    username: 'TestPlayer1',
    avatarKey: 1,
    status: 'approved',
    alive: true,
    role: 'werewolf',
  },
  {
    id: 'player-2',
    username: 'TestPlayer2',
    avatarKey: 2,
    status: 'approved',
    alive: true,
    role: 'seer',
  },
  {
    id: 'player-3',
    username: 'TestPlayer3',
    avatarKey: 3,
    status: 'approved',
    alive: false,
    role: 'villager',
  },
]

describe('GM Room Page', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    ;(getSocket as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket)

    useRoomStore.setState({
      phase: 'night',
      setPhase: vi.fn(),
    })
  })

  afterEach(() => {
    vi.restoreAllMocks()
  })

  describe('Component Rendering', () => {
    it('should render GM room page with basic elements', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('TEST123')).toBeInTheDocument()
        expect(screen.getByText('üéÆ ƒêi·ªÅu khi·ªÉn game')).toBeInTheDocument()
        expect(screen.getByText('Giai ƒëo·∫°n ti·∫øp theo')).toBeInTheDocument()
        expect(screen.getByText('L√†m m·ªõi danh s√°ch')).toBeInTheDocument()
      })
    })

    it('should display current phase indicator', async () => {
      useRoomStore.setState({ phase: 'day' })

      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('Ng√†y')).toBeInTheDocument()
      })
    })

    it('should display connection status', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('M·∫•t k·∫øt n·ªëi')).toBeInTheDocument()
      })
    })
  })

  describe('Game Statistics', () => {
    it('should display game statistics correctly', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('üìä Th·ªëng k√™ game')).toBeInTheDocument()
        expect(screen.getByText('T·ªïng ng∆∞·ªùi ch∆°i')).toBeInTheDocument()
        expect(screen.getByText('C√≤n s·ªëng')).toBeInTheDocument()
        expect(screen.getByText('ƒê√£ ch·∫øt')).toBeInTheDocument()
        expect(screen.getByText('S√≥i c√≤n s·ªëng')).toBeInTheDocument()
        expect(screen.getByText('D√¢n l√†ng c√≤n s·ªëng')).toBeInTheDocument()
      })
    })

    it('should update statistics when players change', async () => {
      const { rerender } = render(
        <GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />,
      )

      await waitFor(() => {
        expect(screen.getByText('0')).toBeInTheDocument() // Total players
      })

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      rerender(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('3')).toBeInTheDocument() // Total players
        expect(screen.getByText('2')).toBeInTheDocument() // Alive players
        expect(screen.getByText('1')).toBeInTheDocument() // Dead players
      })
    })
  })

  describe('Player List', () => {
    it('should display player list when players are available', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('üë• Danh s√°ch ng∆∞·ªùi ch∆°i')).toBeInTheDocument()
      })

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        expect(screen.getByText('TestPlayer1')).toBeInTheDocument()
        expect(screen.getByText('TestPlayer2')).toBeInTheDocument()
        expect(screen.getByText('TestPlayer3')).toBeInTheDocument()
      })
    })

    it('should display player roles correctly', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        expect(screen.getByText('werewolf')).toBeInTheDocument()
        expect(screen.getByText('seer')).toBeInTheDocument()
        expect(screen.getByText('villager')).toBeInTheDocument()
      })
    })

    it('should display player status correctly', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        expect(screen.getAllByText('S·ªëng')).toHaveLength(2)
        expect(screen.getByText('Ch·∫øt')).toBeInTheDocument()
      })
    })
  })

  describe('Player Actions', () => {
    it('should show eliminate button for alive players', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        const eliminateButtons = screen.getAllByText('Lo·∫°i b·ªè')
        expect(eliminateButtons).toHaveLength(2) // Only alive players
      })
    })

    it('should show revive button for dead players', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        const reviveButtons = screen.getAllByText('H·ªìi sinh')
        expect(reviveButtons).toHaveLength(1) // Only dead players
      })
    })

    it('should emit eliminate player event when eliminate button is clicked', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        const eliminateButtons = screen.getAllByText('Lo·∫°i b·ªè')
        fireEvent.click(eliminateButtons[0])
      })

      expect(mockSocket.emit).toHaveBeenCalledWith('rq_gm:eliminatePlayer', {
        roomCode: 'TEST123',
        playerId: 'player-1',
        reason: 'GM lo·∫°i b·ªè',
      })
    })

    it('should emit revive player event when revive button is clicked', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      // Simulate players update
      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        const reviveButtons = screen.getAllByText('H·ªìi sinh')
        fireEvent.click(reviveButtons[0])
      })

      expect(mockSocket.emit).toHaveBeenCalledWith('rq_gm:revivePlayer', {
        roomCode: 'TEST123',
        playerId: 'player-3',
      })
    })
  })

  describe('Game Controls', () => {
    it('should emit next phase event when next phase button is clicked', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        const nextPhaseButton = screen.getByText('Giai ƒëo·∫°n ti·∫øp theo')
        fireEvent.click(nextPhaseButton)
      })

      expect(mockSocket.emit).toHaveBeenCalledWith('rq_gm:nextPhase', {
        roomCode: 'TEST123',
      })
    })

    it('should emit get players event when refresh button is clicked', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        const refreshButton = screen.getByText('L√†m m·ªõi danh s√°ch')
        fireEvent.click(refreshButton)
      })

      expect(mockSocket.emit).toHaveBeenCalledWith('rq_gm:getPlayers', {
        roomCode: 'TEST123',
      })
    })
  })

  describe('Socket Event Handling', () => {
    it('should handle gm:connected event', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const connectedHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:connected',
      )?.[1]

      if (connectedHandler) {
        connectedHandler({
          roomCode: 'TEST123',
          gmRoomId: 'gm_TEST123',
          message: 'GM connected successfully',
        })
      }

      await waitFor(() => {
        expect(screen.getByText('ƒê√£ k·∫øt n·ªëi')).toBeInTheDocument()
      })
    })

    it('should handle gm:playersUpdate event', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const playersUpdateHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:playersUpdate',
      )?.[1]

      if (playersUpdateHandler) {
        playersUpdateHandler({ players: mockPlayers })
      }

      await waitFor(() => {
        expect(screen.getByText('TestPlayer1')).toBeInTheDocument()
        expect(screen.getByText('TestPlayer2')).toBeInTheDocument()
        expect(screen.getByText('TestPlayer3')).toBeInTheDocument()
      })
    })

    it('should handle gm:nightAction event', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const nightActionHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:nightAction',
      )?.[1]

      if (nightActionHandler) {
        nightActionHandler({
          step: 'werewolf',
          action: 'start',
          message: 'Xin m·ªùi S√≥i th·ª©c d·∫≠y.',
          timestamp: Date.now(),
        })
      }

      await waitFor(() => {
        expect(screen.getByText('üåô Nh·∫≠t k√Ω h√†nh ƒë·ªông ƒë√™m')).toBeInTheDocument()
      })
    })

    it('should handle gm:votingAction event', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const votingActionHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:votingAction',
      )?.[1]

      if (votingActionHandler) {
        votingActionHandler({
          type: 'phaseChanged',
          message: 'Chuy·ªÉn sang giai ƒëo·∫°n b·ªè phi·∫øu.',
        })
      }

      await waitFor(() => {
        expect(screen.getByText('üìã H√†ng ƒë·ª£i √¢m thanh')).toBeInTheDocument()
      })
    })

    it('should handle gm:gameEnded event', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const gameEndedHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:gameEnded',
      )?.[1]

      if (gameEndedHandler) {
        gameEndedHandler({
          type: 'gameEnded',
          message: 'Tr√≤ ch∆°i k·∫øt th√∫c. D√¢n l√†ng th·∫Øng!',
          winner: 'villagers',
        })
      }

      await waitFor(() => {
        expect(screen.getByText('üìã H√†ng ƒë·ª£i √¢m thanh')).toBeInTheDocument()
      })
    })
  })

  describe('Audio Queue', () => {
    it('should display audio queue when audio events are added', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('üìã H√†ng ƒë·ª£i √¢m thanh')).toBeInTheDocument()
      })
    })

    it('should display current audio when playing', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('üéµ ƒêi·ªÅu khi·ªÉn √¢m thanh')).toBeInTheDocument()
      })
    })
  })

  describe('Game Logs', () => {
    it('should display game logs section', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      await waitFor(() => {
        expect(screen.getByText('L·ªãch s·ª≠ game (log)')).toBeInTheDocument()
      })
    })

    it('should log game events', async () => {
      render(<GmRoomPage params={Promise.resolve({ roomCode: 'TEST123' })} />)

      const mockSocketInstance = getSocket()
      const nightActionHandler = mockSocket.on.mock.calls.find(
        (call) => call[0] === 'gm:nightAction',
      )?.[1]

      if (nightActionHandler) {
        nightActionHandler({
          step: 'werewolf',
          action: 'start',
          message: 'Xin m·ªùi S√≥i th·ª©c d·∫≠y.',
          timestamp: Date.now(),
        })
      }

      await waitFor(() => {
        expect(screen.getByText('L·ªãch s·ª≠ game (log)')).toBeInTheDocument()
      })
    })
  })
})
